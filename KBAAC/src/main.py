import os
import json
import logging
import random
import disnake
from disnake.ext import commands
from disnake import ApplicationCommandInteraction
from utils.data_handler import load_economy_data, save_economy_data
from utils.cooldowns import CooldownManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "data/logs/bot.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
CONFIG_PATH = os.path.join("data", "config.json")
ECONOMY_PATH = os.path.join("data", "economy.json")

if not os.path.exists(CONFIG_PATH):
    logging.error("–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –•—Ç–æ –≤–∏–¥–∞–ª–∏–≤ config.json? –ó—ñ–∑–Ω–∞–≤–∞–π—Ç–µ—Å—å!")
    raise FileNotFoundError("–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

with open(CONFIG_PATH, "r", encoding="utf-8") as f:
    config = json.load(f)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
admin_roles: dict[int, int] = {}
work_cooldowns = CooldownManager()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
if not os.path.exists(ECONOMY_PATH):
    with open(ECONOMY_PATH, "w", encoding="utf-8") as f:
        json.dump({}, f)
        logging.info("–§–∞–π–ª economy.json —Å—Ç–≤–æ—Ä–µ–Ω–æ. –°–ø–æ–¥—ñ–≤–∞—é—Å—å, —Ç–µ–ø–µ—Ä –Ω—ñ—Ö—Ç–æ –π–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª–∏—Ç—å...")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
intents = disnake.Intents.all()
bot = commands.Bot(command_prefix=config["Prefix"], intents=intents)

# –ü–æ–¥—ñ—è: –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π
@bot.event
async def on_ready():
    logging.info(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏! üéâ")
    logging.info(f"ID –±–æ—Ç–∞: {bot.user.id}")
    logging.info(f"–ü—Ä–µ—Ñ—ñ–∫—Å: {config['Prefix']}")
    print("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ß–∞—Å –ø—ñ–¥–∫–æ—Ä—é–≤–∞—Ç–∏ Discord-—Å–µ—Ä–≤–µ—Ä–∏!")

# –ö–æ–º–∞–Ω–¥–∏
@bot.slash_command(name="work", description="–ó–∞—Ä–æ–±–∏—Ç–∏ –≥—Ä–æ—à—ñ (–∞–±–æ –Ω—ñ)")
async def work(inter: ApplicationCommandInteraction):
    user_id = str(inter.author.id)
    
    if work_cooldowns.is_on_cooldown(user_id):
        await inter.response.send_message(
            "–í–∏ –≤–∂–µ –ø—Ä–∞—Ü—é–≤–∞–ª–∏! –í—ñ–¥–ø–æ—á–∏–Ω—å—Ç–µ —Ç—Ä–æ—Ö–∏, –∞ —Ç–æ —â–µ –≤–∏–≥–æ—Ä–∏—Ç–µ. üõå", 
            ephemeral=True
        )
        return

    earnings = random.randint(config["MoneyRange"]["min"], config["MoneyRange"]["max"])
    data = load_economy_data()
    data[user_id] = data.get(user_id, {"wallet": 0, "bank": 0})
    data[user_id]["wallet"] += earnings
    save_economy_data(data)

    work_cooldowns.set_cooldown(user_id)
    await inter.response.send_message(
        f"–í–∏ –∑–∞—Ä–æ–±–∏–ª–∏ {earnings} –º–æ–Ω–µ—Ç! üí∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ —ó—Ö –Ω–∞ —â–æ—Å—å –∫–æ—Ä–∏—Å–Ω–µ... –∞–±–æ –Ω—ñ."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.run(config["Token"])
    except Exception as e:
        logging.critical(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞: {e}")
        print("üí• –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–ª–∏–≤–æ, —Ç–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π? –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ config.json.")