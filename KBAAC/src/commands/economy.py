import os
import json
import random
import disnake
from disnake.ext import commands
from disnake import ApplicationCommandInteraction
from utils.data_handler import load_economy_data, save_economy_data
from utils.cooldowns import Cooldown

# –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ work
work_cooldown = Cooldown(300)  # 5 —Ö–≤–∏–ª–∏–Ω

@commands.slash_command(name="work", description="–ó–∞—Ä–æ–±–∏—Ç–∏ –≥—Ä–æ—à—ñ")
@work_cooldown.check()
async def work(inter: ApplicationCommandInteraction):
    data = load_economy_data()
    user_id = str(inter.author.id)

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É
    min_earning = 50  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫
    max_earning = 150  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—É–º–∏
    earning = random.randint(min_earning, max_earning)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data[user_id] = data.get(user_id, {"wallet": 0, "bank": 0})
    data[user_id]["wallet"] += earning
    save_economy_data(data)

    await inter.response.send_message(f"–í–∏ –∑–∞—Ä–æ–±–∏–ª–∏ {earning} –º–æ–Ω–µ—Ç! üéâ")

@commands.slash_command(name="set_money_range", description="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–æ–±—ñ—Ç–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ work")
async def set_money_range(inter: ApplicationCommandInteraction, min_amount: int, max_amount: int):
    if min_amount < 0 or max_amount <= min_amount:
        await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–æ–±—ñ—Ç–∫—É!", ephemeral=True)
        return

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
    config_path = os.path.join("data", "config.json")
    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)

    config["MoneyRange"]["min"] = min_amount
    config["MoneyRange"]["max"] = max_amount

    with open(config_path, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4)

    await inter.response.send_message(f"–î—ñ–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_amount} - {max_amount} –º–æ–Ω–µ—Ç.")

@commands.slash_command(name="set_casino_odds", description="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —à–∞–Ω—Å–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ")
@PermissionChecks.is_guild_owner()
async def set_casino_odds(inter: ApplicationCommandInteraction, odds: float):
    if odds < 0 or odds > 1:
        await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —à–∞–Ω—Å–∏! –í–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º—ñ–∂ 0 —ñ 1.", ephemeral=True)
        return

    # Save the new casino odds to the config
    config_path = os.path.join("data", "config.json")
    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)

    config["casino_odds"] = odds

    with open(config_path, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4)

    await inter.response.send_message(f"–®–∞–Ω—Å–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {odds * 100}%.")

# Additional functions for credit system can be added here as needed.